pipeline {
    agent any

    environment {
        AZURE_CREDENTIALS_ID = 'azure-service-principal'  // Jenkins credential ID for Azure
        RESOURCE_GROUP = 'rg-jenkins'
        APP_SERVICE_NAME = 'webapijenkins2543'
        PYTHON_VERSION = '3.12.8'
        PATH = "C:\Users\HP\AppData\Local\Programs\Python\Python312\python.exe\Scripts"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sakshimathur03/PythonJenkins.git'
            }
        }

        stage('Verify Python Installation') {
            steps {
                script {
                    def pythonCheck = bat(script: "where python", returnStatus: true)
                    if (pythonCheck != 0) {
                        error("Python is not installed or not found in PATH!")
                    }
                }
                bat "python --version"
            }
        }

        stage('Setup Python Virtual Environment') {
            steps {
                bat "python -m venv venv"  // Create virtual environment
                bat "call venv\\Scripts\\activate" // Activate virtual environment
                bat "pip install --upgrade pip" // Upgrade pip
                bat "pip install -r requirements.txt" // Install dependencies
            }
        }

        stage('Package Application') {
            steps {
                bat "powershell Compress-Archive -Path * -DestinationPath app.zip -Force"
            }
        }

        stage('Deploy to Azure') {
            steps {
                withCredentials([azureServicePrincipal(credentialsId: AZURE_CREDENTIALS_ID)]) {
                    script {
                        def loginCommand = "az login --service-principal -u %AZURE_CLIENT_ID% -p %AZURE_CLIENT_SECRET% --tenant %AZURE_TENANT_ID%"
                        def deployCommand = "az webapp up --resource-group ${RESOURCE_GROUP} --name ${APP_SERVICE_NAME} --runtime PYTHON:${PYTHON_VERSION} --src-path app.zip"
                        
                        bat loginCommand
                        bat deployCommand
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Deployment Successful!'
        }
        failure {
            echo '‚ùå Deployment Failed! Check logs for errors.'
        }
    }
}
